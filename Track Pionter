# import the necessary packages
from collections import deque
from imutils.video import VideoStream
import numpy as np
import cv2
import imutils
import time

# define the lower and upper boundaries of the colors in the HSV color space
colors = {
    'green': {
        'lower': np.array([29, 86, 6]),
        'upper': np.array([64, 255, 255])
    },
    'blue': {
        'lower': np.array([90, 100, 100]),
        'upper': np.array([130, 255, 255])
    },
    'yellow': {
        'lower': np.array([20, 100, 100]),
        'upper': np.array([30, 255, 255])
    }
}

# Color labels for drawing text on the frame
color_labels = {
    'green': (0, 255, 0),
    'blue': (255, 0, 0),
    'yellow': (0, 255, 255)
}

# initialize the list of tracked points, the frame counter, and the coordinate deltas
pts = deque(maxlen=32)
counter = 0
(dX, dY) = (0, 0)
direction = ""

# initialize the video stream
vs = VideoStream(src=0).start()

# allow the camera to warm up
time.sleep(2.0)

# keep looping
while True:
    # grab the current frame
    frame = vs.read()

    # resize the frame, blur it, and convert it to the HSV color space
    frame = imutils.resize(frame, width=600)
    blurred = cv2.GaussianBlur(frame, (11, 11), 0)
    hsv = cv2.cvtColor(blurred, cv2.COLOR_BGR2HSV)

    # loop over the defined colors
    for color_name, color_data in colors.items():
        # check if the color data is a list (for multiple ranges of a color)
        if isinstance(color_data, list):
            # create an empty mask for this color
            mask = np.zeros(frame.shape[:2], dtype=np.uint8)
            # construct masks for each range and add them together
            for range_data in color_data:
                lower = range_data['lower']
                upper = range_data['upper']
                mask_range = cv2.inRange(hsv, lower, upper)
                mask = cv2.bitwise_or(mask, mask_range)
        else:
            # construct a mask for the current color
            lower = color_data['lower']
            upper = color_data['upper']
            mask = cv2.inRange(hsv, lower, upper)

        # perform a series of dilations and erosions to remove any small blobs left in the mask
        mask = cv2.erode(mask, None, iterations=2)
        mask = cv2.dilate(mask, None, iterations=2)

        # find contours in the mask and initialize the current (x, y) center of the ball
        cnts = cv2.findContours(mask.copy(), cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
        cnts = imutils.grab_contours(cnts)
        center = None

        # only proceed if at least one contour was found
        if len(cnts) > 0:
            # find the largest contour in the mask, then use it to compute the minimum enclosing circle and centroid
            c = max(cnts, key=cv2.contourArea)
            ((x, y), radius) = cv2.minEnclosingCircle(c)
            M = cv2.moments(c)
            center = (int(M["m10"] / M["m00"]), int(M["m01"] / M["m00"]))

            # only proceed if the radius meets a minimum size
            if radius > 10:
                # draw the circle and centroid on the frame, then update the list of tracked points
                cv2.circle(frame, (int(x), int(y)), int(radius), color_labels[color_name], 2)
                cv2.circle(frame, center, 5, color_labels[color_name], -1)
                pts.appendleft(center)

                # label the color near the object
                cv2.putText(frame, color_name, (int(x - radius), int(y - radius - 10)), cv2.FONT_HERSHEY_SIMPLEX,
                            0.6, color_labels[color_name], 2)

    # loop over the set of tracked points
    for i in range(1, len(pts)):
        # if either of the tracked points are None, ignore them
        if pts[i - 1] is None or pts[i] is None:
            continue

        # check to see if enough points have been accumulated in the buffer
        if counter >= 10 and i == 1 and pts[-10] is not None:
            # compute the difference between the x and y coordinates and re-initialize the direction text variables
            dX = pts[-10][0] - pts[i][0]
            dY = pts[-10][1] - pts[i][1]
            (dirX, dirY) = ("", "")

            # ensure there is significant movement in the x-direction
            if np.abs(dX) > 20:
                dirX = "East" if np.sign(dX) == 1 else "West"

            # ensure there is significant movement in the y-direction
            if np.abs(dY) > 20:
                dirY = "North" if np.sign(dY) == 1 else "South"

            # handle when both directions are non-empty
            if dirX != "" and dirY != "":
                direction = "{}-{}".format(dirY, dirX)
            # otherwise, only one direction is non-empty
            else:
                direction = dirX if dirX != "" else dirY

        # compute the thickness of the line and draw the connecting lines
        thickness = int(np.sqrt(32 / float(i + 1)) * 2.5)
        cv2.line(frame, pts[i - 1], pts[i], (0, 0, 255), thickness)

    # show the movement deltas and the direction of movement on the frame
    cv2.putText(frame, direction, (10, 30), cv2.FONT_HERSHEY_SIMPLEX, 0.65, (0, 0, 255), 3)
    cv2.putText(frame, "dx: {}, dy: {}".format(dX, dY), (10, frame.shape[0] - 10), cv2.FONT_HERSHEY_SIMPLEX, 0.35,
                (0, 0, 255), 1)

    # show the frame
    cv2.imshow("Frame", frame)
    key = cv2.waitKey(1) & 0xFF

    # if the 'q' key is pressed, stop the loop
    if key == ord("q"):
        break

# stop the video stream
vs.stop()

# close all windows
cv2.destroyAllWindows()
